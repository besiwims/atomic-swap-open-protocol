minting userTokenPolicy

enum Redeemer { 
    Mint {
        pkhBA: ByteArray
        timestampBA: String
        qty: Int
    }
    Burn 
}

// Contract parameters 
const VERSION: ByteArray = #
const OWNER_PKH: ByteArray = #
const ownerPkh: PubKeyHash = PubKeyHash::new(OWNER_PKH)

func main(redeemer: Redeemer, ctx: ScriptContext) -> Bool {
    
    tx : Tx = ctx.tx;

    redeemer.switch {
        red: Mint => {
            tn: String = red.pkhBA.show() + red.timestampBA;
            tnBA: ByteArray = tn.encode_utf8();
            userTokenAssetclass: AssetClass = AssetClass::new(
                ctx.get_current_minting_policy_hash(), 
                tnBA
            );
            userTokenVal : Value = Value::new(userTokenAssetclass, red.qty);
            userPkh: PubKeyHash = PubKeyHash::new(red.pkhBA);
            tx.is_signed_by(ownerPkh).trace("UTP1: ") &&
            tx.is_signed_by(userPkh).trace("UTP2: ") &&
            (tx.minted == userTokenVal).trace("UTP3: ")
        },
        Burn => { 
            true 
        }
    }
}
spending swap

struct Datum {
    askedAssetVal: Value
    offeredAssetVal: Value
}

struct TokenDatum {
    userPkhBA: ByteArray
}

enum Redeemer {
    Close 
    Swap {
        buyerPkh: PubKeyHash
    }
    Update 
}

// Contract parameters 
const VERSION: ByteArray = #
const ASKED_MPH: ByteArray = #
const ASKED_TN: ByteArray = #
const OFFERED_MPH: ByteArray = #
const OFFERED_TN: ByteArray = #
const BEACON_MPH: ByteArray = #
const beaconMPH: MintingPolicyHash = MintingPolicyHash::new(BEACON_MPH)
const SELLER_PKH: ByteArray = #
const SELLER_TN: ByteArray = #
const sellerPKH: PubKeyHash = PubKeyHash::new(SELLER_PKH)
const ESCROW_ENABLED: Bool = false
const ESCROW_HASH: ByteArray = #
const USER_TOKEN_MPH: ByteArray = #
const userTokenMPH: MintingPolicyHash = MintingPolicyHash::new(USER_TOKEN_MPH)
const USER_TOKEN_VHASH: ByteArray = #
const SERVICE_FEE: Int = 0
const OWNER_PKH: ByteArray = #
const ownerPKH: PubKeyHash = PubKeyHash::new(OWNER_PKH)
const MIN_ADA: Int = 2_500_000
const minAdaVal: Value = Value::lovelace(MIN_ADA)
const DEPOSIT_ADA: Int = 0
const depositAdaVal: Value = Value::lovelace(DEPOSIT_ADA)

func checkAdaVal(value: Value) -> Value {
    // If the value is not lovelace, then add minAda
    if(value.get_lovelace() == 0) {
        minAdaVal + value
    } else {
        value
    }
}

func getUserPkh(userTokenVal: Value, txRefInputs: []TxInput) -> Option[PubKeyHash] {

    if (txRefInputs.length >= 1) {

        if (txRefInputs.head.output.value == minAdaVal + userTokenVal) {
            txRefInputs.head.output.datum.switch {
                refTokenDatum: Inline => {

                    refTokenData:TokenDatum = TokenDatum::from_data(refTokenDatum.data);
                    print("refTokenData.userPkhBA: " + refTokenData.userPkhBA.show());
                    print("refTokenData.userPkhBA.length: " + refTokenData.userPkhBA.length.show());
                    //if (refTokenData.userPkhBA.length == 30) {
                    userPkh: PubKeyHash = PubKeyHash::new(refTokenData.userPkhBA.slice(2,30));
                    Option[PubKeyHash]::Some{userPkh}
                    //} else {
                    //    userPkh: PubKeyHash = PubKeyHash::new(refTokenData.userPkhBA);
                    //    Option[PubKeyHash]::Some{userPkh}
                    //}  
                    
                },
                else => Option[PubKeyHash]::None // no reference inline datum
            }
        } else {
            getUserPkh(userTokenVal, txRefInputs.tail)
        } 
    }else {
            // No reference input matching user token value
            Option[PubKeyHash]::None
    }
}

func main(datumIn: Datum, redeemer: Redeemer, ctx: ScriptContext) -> Bool {

    print("VERSION: " + VERSION.show());

    // Get hash of this validator
    sHash : ValidatorHash = ctx.get_current_validator_hash();
    beaconTN: ByteArray = sHash.serialize().slice(2,60); // remove header info
    
    // Calculate the beacon token
    beaconAssetclass: AssetClass = AssetClass::new(
        beaconMPH, 
        beaconTN
    );
    beaconVal : Value = Value::new(beaconAssetclass, 1);

    // Calculate the asked token
    askedMph: MintingPolicyHash = MintingPolicyHash::new(ASKED_MPH);
    askedAssetclass: AssetClass = AssetClass::new(
        askedMph, 
        ASKED_TN
    );

    // Calculate the offered token
    offeredMph: MintingPolicyHash = MintingPolicyHash::new(OFFERED_MPH);
    offeredAssetclass: AssetClass = AssetClass::new(
        offeredMph, 
        OFFERED_TN
    );
    
    tx : Tx = ctx.tx;
    txOutputsContract : []TxOutput = tx.outputs_locked_by(sHash);

    // Create seller token that will be sent back to the seller
    sellerTokenAssetclass: AssetClass = AssetClass::new(
        userTokenMPH, 
        SELLER_TN
    );
    sellerTokenVal : Value = Value::new(sellerTokenAssetclass, 1);
    
    redeemer.switch {
        Close => {

            // Create beacon token value for burning
            beaconTokenBurnVal: Value = Value::new(beaconAssetclass, (-1));

            (txOutputsContract.length == 0).trace("SV1.1: ") &&
            tx.is_signed_by(sellerPKH).trace("SV1.2: ") &&
            (tx.minted == beaconTokenBurnVal).trace("SV1.3: ") &&
            (tx.value_sent_to(sellerPKH).contains(sellerTokenVal)).trace("SV1.4: ")
        },
        red: Swap => { 

            txRefInputs : []TxInput = tx.ref_inputs;
            txOutputsBuyer : []TxOutput = tx.outputs_sent_to(red.buyerPkh);
            txOutputsOwner : []TxOutput = tx.outputs_sent_to(ownerPKH);
            if (txOutputsContract.length == 1 && txOutputsBuyer.length >= 1) {
                
                // Pull out the buyer token value
                buyerToken: Map[ByteArray]Int = txOutputsBuyer.head.value.get_policy(userTokenMPH);   
                //buyerTN: String = (buyerToken.head_key).slice(0,56).decode_utf8();
                buyerTokenMap = Map[MintingPolicyHash]Map[ByteArray]Int{userTokenMPH: buyerToken};
                buyerTokenVal = Value::from_map(buyerTokenMap);
             
                txOutputsContract.head.datum.switch {
                    datumOut: Inline => { 
                        datumOutData: Datum = Datum::from_data(datumOut.data);
                        offeredAssetDiffVal: Value = datumIn.offeredAssetVal - datumOutData.offeredAssetVal;
                        offeredAssetDiffQty: Int = offeredAssetDiffVal.get(offeredAssetclass);
                        feeVal: Value = Value::lovelace(SERVICE_FEE);
                        
                        // Check that the askedAsset datum value does not change
                        (datumIn.askedAssetVal == datumOutData.askedAssetVal).trace("SV2.1: ") &&
                        // Check that the askedAsset in the datum is what is asked as part of this swap
                        (datumIn.askedAssetVal.get(askedAssetclass) > 0).trace("SV2.2: ") &&
                        // Check that the offeredAsset in the datum is what is offered as part of this swap
                        (datumIn.offeredAssetVal.get(offeredAssetclass) > 0).trace("SV2.3: ") &&
                        // Check that the buyer and seller tokens have a corresponding
                        // reference tokens and with a correct pkh matches
                        getUserPkh(buyerTokenVal, txRefInputs).switch {
                            buyerPkhLookup : Some => {
                                print("buyerPkhLookup.some: " + buyerPkhLookup.some.show());
                                tx.is_signed_by(buyerPkhLookup.some).trace("SV2.4: ") 
                            }, 
                            else => { false.trace("SV2.5: ") } // could not find user pkh
                        } &&
                        getUserPkh(sellerTokenVal, txRefInputs).switch {
                            sellerPKHLookup : Some => {
                                print("sellerPkhLookup.some: " + sellerPKHLookup.some.show());
                                print("sellerPKH: " + sellerPKH.show());
                                (sellerPKH == sellerPKHLookup.some).trace("SV2.6: ") 
                            }, 
                            else => { false.trace("SV2.7: ") } // could not find user pkh
                        } &&
                        (if (ESCROW_ENABLED) {
                            swapVal: Value = checkAdaVal(datumOutData.offeredAssetVal) + beaconVal + sellerTokenVal;
                            buyerVal: Value = offeredAssetDiffVal;
                            sellerVal: Value =  datumIn.askedAssetVal * offeredAssetDiffQty;
                            escrowVal: Value = depositAdaVal + checkAdaVal(buyerVal + sellerVal);
                            eHash = ValidatorHash::new(ESCROW_HASH);
                            
                            (tx.value_locked_by(sHash) == (swapVal)).trace("SV3.1: ") &&
                            (tx.value_locked_by(eHash) == (escrowVal)).trace("SV3.2: ") &&
                            (feeVal == txOutputsOwner.head.value).trace("SV3.3: ") 
                        } else {
                            swapVal: Value = checkAdaVal(datumOutData.offeredAssetVal) + beaconVal + sellerTokenVal;
                            buyerVal: Value = checkAdaVal(offeredAssetDiffVal) + buyerTokenVal;
                            sellerVal: Value =  checkAdaVal(datumIn.askedAssetVal * offeredAssetDiffQty);
                           
                            (tx.value_locked_by(sHash) == (swapVal)).trace("SV4.1: ") &&
                            (buyerVal == txOutputsBuyer.head.value).trace("SV4.2: ") &&
                            (sellerVal == tx.value_sent_to(sellerPKH)).trace("SV4.3: ") &&
                            (feeVal == txOutputsOwner.head.value).trace("SV4.3: ") 
                        }) 
                    },
                    else => false.trace("SV4.6: ") // No inline datum found
                }
            } else {
                false.trace("SV4.7: ") // No datum found in outputs
            }
        },
        Update => {

            if (txOutputsContract.length == 1) {
            
                txOutputsContract.head.datum.switch {
                    datumOut: Inline => { 
                        datumOutInline: Datum = Datum::from_data(datumOut.data);
                        swapVal: Value = checkAdaVal(datumOutInline.offeredAssetVal) + beaconVal + sellerTokenVal;
                        // TODO check that askedAsset price is not less than min Ada
                        tx.is_signed_by(sellerPKH).trace("SV5.1: ") &&
                        (tx.value_locked_by(sHash) == (swapVal)).trace("SV5.2: ") 
                    },
                    else => false.trace("SV5.3: ") // No inline datum found
                }
            } else {
                false.trace("SV5.4: ") // No datum found in outputs
            }
        }
    }
}